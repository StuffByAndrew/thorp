<launch>
  <arg name="dynamixel_namespace" value="/" />

  <rosparam ns="$(arg dynamixel_namespace)" file="$(find thorp_arm_ctrl)/param/controllers.yaml" command="load"/>

  <!-- Start the Dynamixel low-level driver manager with parameters -->
  <node ns="$(arg dynamixel_namespace)" name="dynamixel_manager" pkg="dynamixel_controllers" type="controller_manager.py"  output="screen" respawn="true">
    <rosparam>
      namespace: dynamixel_manager
      diagnostics_rate: 1
      serial_ports:
        dynamixel_usb2ax:
          port_name: "/dev/USB2AX"
          baud_rate: 1000000
          min_motor_id: 1
          max_motor_id: 5
          update_rate: 20
          diagnostics:
            error_level_temp: 65
            warn_level_temp: 60
     </rosparam>
  </node>

  <!-- Start the arm trajectory controller -->
  <node ns="$(arg dynamixel_namespace)" name="arm_controller_spawner" pkg="dynamixel_controllers" type="controller_spawner.py" output="screen" 
        args="--manager=dynamixel_manager
              --type=meta
              arm_controller
              arm_shoulder_pan_joint
              arm_shoulder_lift_joint
              arm_elbow_flex_joint
              arm_wrist_flex_joint"/>

  <!-- Start all AX12 joint controllers -->
  <node ns="$(arg dynamixel_namespace)" name="ax12_controllers_spawner" pkg="dynamixel_controllers" type="controller_spawner.py" output="screen" respawn="true" 
        args="--manager=dynamixel_manager
              --port=dynamixel_usb2ax
              --type=simple
              arm_shoulder_pan_joint
              arm_shoulder_lift_joint
              arm_elbow_flex_joint
              arm_wrist_flex_joint
              gripper_joint"/>

  <!-- Start the Dynamixel Joint States Publisher -->
  <node ns="$(arg dynamixel_namespace)" pkg="thorp_arm_ctrl" name="dynamixel_joint_states_pub" type="dynamixel_joint_state_publisher.py" output="screen" respawn="true">
    <param name="rate" value="20" />
  </node>

  <!-- Fake gripper link joint state publisher -->
  <node name="fake_gripper_joint_pub" pkg="turtlebot_arm_bringup" type="fake_joint_pub.py"/>

  <!-- Start the Dynamixel servos relaxed
   <node ns="$(arg dynamixel_namespace)" pkg="thorp_arm_ctrl" name="dynamixel_relax_all_servos" type="dynamixel_relax_all_servos.py"/>
 -->
 
  <!-- Load diagnostics -->
<!--    <node pkg="diagnostic_aggregator" type="aggregator_node" name="diagnostic_aggregator" >
      <rosparam command="load" file="$(find rbx2_bringup)/config/diagnostics.yaml" />
   </node>

   <node pkg="rqt_robot_monitor" type="rqt_robot_monitor" name="robot_monitor" />
   
   Start all servos in a relaxed state
   <node ns="$(arg dynamixel_namespace)" pkg="rbx2_dynamixels" type="relax_all_servos.py" name="relax_all_servos" />
  
   Publish a static transform between the robot base and the world frame
   <node pkg="tf" type="static_transform_publisher" name="world_base_broadcaster" args="0 0 0 0 0 0 /world /base_link 100" />
 -->
</launch>