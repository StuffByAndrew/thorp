#!/usr/bin/env python

import rospy
import smach
import smach_ros

import keyboard.msg as keyboard_msgs
import geometry_msgs.msg as geometry_msgs
import move_base_msgs.msg as move_base_msgs

from actionlib import *
from actionlib_msgs.msg import *
from turtlebot_arm_object_manipulation.msg import *

USER_COMMANDS = {
    keyboard_msgs.Key.KEY_s: "start",
    keyboard_msgs.Key.KEY_r: "reset",
    keyboard_msgs.Key.KEY_f: "fold",
    keyboard_msgs.Key.KEY_q: "quit"
}

def keydown_cb(ud, msg):
    rospy.loginfo("Key pressed: %s", msg.code)
    if msg.code in USER_COMMANDS:
        om_sm.userdata['user_command'] = USER_COMMANDS[msg.code]
        om_sm.request_preempt()
   
    return True

def child_term_cb(states):
    rospy.loginfo("Concurrency child terminated: %s", states)
   
    # Preempt all other states 
    return True

                                        
class ActionPreempted(smach.State):
    def __init__(self):
        smach.State.__init__(self, outcomes=['reset', 'fold', 'quit'],
                                   input_keys=['user_command'])

    def execute(self, ud):
        rospy.loginfo("Executing User Command '%s'", ud['user_command'])
        return ud['user_command']

om_sm = smach.StateMachine(outcomes=['success',
                                     'aborted',
                                     'preempted'])

def main():
    rospy.init_node('object_manipulation_smach')

    with om_sm:
        ''' general '''
        om_sm.userdata.true = True
        om_sm.userdata.false = False
        ''' table poses '''
        om_sm.userdata.frame          = rospy.get_param('~arm_link', '/arm_link')
        om_sm.userdata.gripper_open   = rospy.get_param('~gripper_open', 0.042)
        om_sm.userdata.gripper_closed = rospy.get_param('~gripper_closed', 0.024)
        om_sm.userdata.z_up           = rospy.get_param('~z_up', 0.12)
        om_sm.userdata.obj_size       = rospy.get_param('~obj_size', 0.025)
        om_sm.userdata.obj_poses      = geometry_msgs.msg.PoseArray()
        om_sm.userdata.obj_names      = []###############
        om_sm.userdata.obj_name       = std_msgs.msg.String()
        om_sm.userdata.pick_pose      = geometry_msgs.msg.Pose()
        om_sm.userdata.place_pose     = geometry_msgs.msg.Pose()
        om_sm.userdata.topic          = ''

        smach.StateMachine.add('BlockDetection',
                               smach_ros.SimpleActionState('object_detection',
                                                           ObjectDetectionAction,
                                                           goal_slots=['frame', 'obj_size'],
                                                           result_slots=['obj_poses', 'obj_names']),
                               remapping={'frame':'frame',
                                          'obj_size':'obj_size',
                                          'obj_poses':'obj_poses',
                                          'obj_names':'obj_names'},
                               transitions={'succeeded':'InteractiveManip',
                                            'aborted':'aborted',
                                            'preempted':'ActionPreempted'})

        smach.StateMachine.add('InteractiveManip',
                               smach_ros.SimpleActionState('interactive_manipulation',
                                                           InteractiveManipAction,
                                                           goal_slots=['frame', 'obj_size', 'obj_poses', 'obj_names'],
                                                           result_slots=['obj_name', 'pick_pose', 'place_pose']),
                               remapping={'frame':'frame',
                                          'obj_size':'obj_size',
                                          'obj_poses':'obj_poses',
                                          'obj_names':'obj_names',
                                          'pick_pose':'pick_pose',
                                          'place_pose':'place_pose'},
                               transitions={'succeeded':'PickAndPlace',
                                            'aborted':'BlockDetection',
                                            'preempted':'ActionPreempted'})

        smach.StateMachine.add('PickAndPlace',
                               smach_ros.SimpleActionState('pick_and_place',
                                                           PickAndPlaceAction,
                                                           goal_slots=['frame', 'z_up',
                                                                       'gripper_open', 'gripper_closed',
                                                                       'obj_name', 'pick_pose', 'place_pose', 'topic'],
                                                           result_slots=[]),
                               remapping={'frame':'frame',
                                          'z_up':'z_up',
                                          'gripper_open':'gripper_open',
                                          'gripper_closed':'gripper_closed',
                                          'pick_pose':'pick_pose',
                                          'place_pose':'place_pose'},
                               transitions={'succeeded':'BlockDetection',
                                            'aborted':'BlockDetection',
                                            'preempted':'ActionPreempted'})

        smach.StateMachine.add('ActionPreempted', ActionPreempted(),
                               transitions={'reset':'BlockDetection', 
                                            'fold':'BlockDetection', 
                                            'quit':'aborted'})

    sm = smach.Concurrence(outcomes=['success', 'aborted', 'preempted'],
                                        default_outcome='success',
                                        child_termination_cb=child_term_cb)

    with sm:
        smach.set_shutdown_check(rospy.is_shutdown)
        smach.Concurrence.add('OBJ_MANIP', om_sm)
        smach.Concurrence.add('USER_CMDS', 
                               smach_ros.MonitorState("/object_manipulation_keyboard/keydown", 
                                                      keyboard_msgs.Key, 
                                                      keydown_cb,
                                                      output_keys=['user_command'])) 
#                                                       transitions={'valid':'KeyboardInput', 
#                                                                    'invalid':'KeyboardInput', 
#                                                                    'preempted':'KeyboardInput'}))

    # Create and start the introspection server
    sis = smach_ros.IntrospectionServer('object_manipulation', sm, '/SM_ROOT')
    sis.start()
    
    # Execute the state machine
    rospy.logerr(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>   ABOUT TO EXEC")
    
    # Create a thread to execute the smach container
    smach_thread = threading.Thread(target=sm.execute)
    smach_thread.start()

    # Wait for ctrl-c to stop the application
    rospy.logerr(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>   ABOUT TO SPIN")
    rospy.spin()
   
    # Request the container to preempt
    rospy.logerr(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>   REQUEST PREEMPT")
    sm.request_preempt()
    
    rospy.signal_shutdown('All done.')
    
    # Block until everything is preempted (we ignore execution outcome by now)
    smach_thread.join()

    
    rospy.logerr(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>   SPINNING!!!")
    sis.stop()

    rospy.logerr(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>   STOPPED!!!!!!!!!!!")
#     om_sm.request_preempt()
#     rospy.logerr(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>   REQUEST PREEMPT")
    
    rospy.signal_shutdown('All done.')
    rospy.logerr(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>   ALL DONE")


if __name__ == '__main__':
    main()
