/*
  Read all range sensors connected to the Arduino analog ports and send through serial port.
  We let any conversion or postprocessing to the reading PC, so we just pass the 0..1023 raw
  values read. For sonars, we also trigger readings by pulling HIGH their RX PIN for 20 uS.
 */

int IR_COUNT = 4;
int HS_COUNT = 11;
int inputPin[] = {  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 15, 14, 13, 12 };
int triggPin[] = { 48, 44, 40, 36, 32, 28, 22, 35, 47, 43, 39 };
byte outBuffer[sizeof(inputPin) + 2];


void setup() {
  // initialize serial communication at 115200 bits per second:
  Serial.begin(115200);

  // initialize all trigger PINs at LOW
  for (int i = 0; i < HS_COUNT; i++)
  {
    pinMode(triggPin[i], OUTPUT);
    digitalWrite(triggPin[i], LOW);
  }

  // set the first two bytes to signal the beginning of a readings set; note that our
  // protocol is really crude... we should avoid writing faster than the PC reads!
  outBuffer[0] = 0xFF;
  outBuffer[1] = 0xFF;
}

void loop() {
  // read analog input PINs, first those with even index, then those with odd
  // we notably mitigate crosstalking, at the cost of halving the reading rate
  readSonars(0);
  readSonars(1);

  // read remaining analog input PINs, the IR sensors that need not triggering
  for (int i = HS_COUNT; i < HS_COUNT + IR_COUNT; i++)
    readAnalog(i);

  // write buffer to serial port
  Serial.write(outBuffer, sizeof(outBuffer));
  Serial.flush();
}

void readSonars(int parity)
{
  // trigger sonars reading
  for (int i = parity; i < HS_COUNT - 1 + parity; i+=2)
    digitalWrite(triggPin[i], HIGH);
  delayMicroseconds(20);
  for (int i = parity; i < HS_COUNT - 1 + parity; i+=2)
    digitalWrite(triggPin[i], LOW);
    
  // delay a bit less than the sensors period, to compensate the wasted time on reading
  delay(46);

  // read analog input PINs
  for (int i = parity; i < HS_COUNT - 1 + parity; i+=2)
    readAnalog(i);
}

void readAnalog(int index)
{
  // read and pack the obtained value as two bytes,
  // always skipping the first two "protocol" bytes
  int ar = analogRead(A0 + inputPin[index]);
  outBuffer[(index+1)*2+1] = (byte)((ar >> 8) & 0xFF);
  outBuffer[(index+1)*2]   = (byte)(ar & 0xFF) ;
}


//void loop() {
//  // trigger sonars reading
//  for (int i = 0; i < HS_COUNT; i++)
//    digitalWrite(triggPin[i], HIGH);
//  delayMicroseconds(20);
//  for (int i = 0; i < HS_COUNT; i++)
//    digitalWrite(triggPin[i], LOW);
//
////  digitalWrite(39, HIGH);
////  //digitalWrite(39, HIGH);
////  delayMicroseconds(2000);
////  //digitalWrite(47, LOW);
//    
//  // delay a bit less than the sensors period, to compensate the wasted time on reading
//  delay(46);
//
//  // read all analog input PINs and pack the obtained value as two bytes, skipping the
//  // first two "protocol" bytes
//  for (int i = 0; i < HS_COUNT + IR_COUNT; i++) {
//    int ar = analogRead(A0 + inputPin[i]);
//    outBuffer[(i+1)*2+1] = (byte)((ar >> 8) & 0xFF);
//    outBuffer[(i+1)*2]   = (byte)(ar & 0xFF) ;
//  }
//  // write buffer to serial port
//  Serial.write(outBuffer, sizeof(outBuffer));
//  Serial.flush();
//}

