<launch>
  <arg name="external_camera" default="false"/>

  <!--  *********** 3D sensor (on/off-board) **********  -->

  <include if="$(arg external_camera)" file="$(find turtlebot_bringup)/launch/3dsensor.launch"/>

  <node unless="$(arg external_camera)" name="senz3d" pkg="softkinetic_camera" type="softkinetic_bringup_node" args="0" output="screen">
    <param name="camera_link"           type="string" value="/senz3d_camera_depth_frame"/>

	<!-- Depth camera configuration -->
    <param name="depth_optical_frame"   type="string" value="/senz3d_camera_depth_optical_frame"/>
    <param name="depth_mode"            type="string" value="close"/>
    <param name="depth_frame_format"    type="string" value="QQVGA"/>
    <param name="depth_frame_rate"      type="int"    value="25"/>

	<!-- Color camera configuration -->
    <param name="rgb_calibration_file"  type="string" value="$(find softkinetic_camera)/resources/senz3d.yaml"/>
    <param name="rgb_optical_frame"     type="string" value="/senz3d_camera_rgb_optical_frame"/>
    <param name="color_compression"     type="string" value="MJPEG"/>
    <param name="color_frame_format"    type="string" value="WXGA"/>
    <param name="color_frame_rate"      type="int"    value="25"/>

	<!-- Finer cloud filtering so we don't miss the blocks -->
    <param name="confidence_threshold"  type="int"    value="500"/>
    <param name="use_voxel_grid_filter" type="bool"   value="true"/>
    <param name="use_radius_filter"     type="bool"   value="true"/>
    <param name="voxel_grid_side"       type="double" value="0.0025"/>
    <param name="search_radius"         type="double" value="0.025"/>
    <param name="min_neighbours"        type="int"    value="80"/>
  </node>


  <!--  *********** Block manipulation demo ***********  -->
  
  <node name="block_manipulation_demo" pkg="turtlebot_arm_block_manipulation" type="block_manipulation_demo" output="screen" >
    <param name="arm_link" value="/arm_base_link"/>
    <param name="gripper_open" value="0.05"/>
    <param name="gripper_closed" value="0.022"/>
    <param name="z_up" value="0.05"/>
    <param name="table_height" value="-0.03"/>
    <param name="block_size" value="0.025"/>
  </node>

  <node name="block_detection_action_server" pkg="turtlebot_arm_block_manipulation" type="block_detection_action_server" output="screen">
    <remap unless="$(arg external_camera)" from="/camera/depth_registered/points" to="/senz3d/depth/points"/>
  </node>

  <node name="pick_and_place_action_server" pkg="turtlebot_arm_block_manipulation" type="pick_and_place_action_server" output="screen">
  </node>
  
  <node name="interactive_manipulation_action_server" pkg="turtlebot_arm_block_manipulation" type="interactive_manipulation_action_server" output="screen">
    <param name="bump_size" value="0.025"/>
  </node>

  <!-- Run Rviz and load the default config to see the state of the move_group node and the block manipulation interactive markers -->
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find thorp_bringup)/rviz/view_manip.rviz"/>


  <!--  ************* Thorp bringup stuff *************  -->

  <param name="robot_description" command="$(find xacro)/xacro.py '$(find thorp_bringup)/urdf/thorp.urdf.xacro'"/>

  <include file="$(find thorp_bringup)/launch/includes/_arm.launch"/>
  
  <node name="robot_state_pub" pkg="robot_state_publisher" type="robot_state_publisher"/>

  <!-- Fake base's wheels joint state, as we are not running the full robot by now -->
  <node name="fake_joint_pub" pkg="thorp_bringup" type="fake_joint_pub.py"/>

  <node name="arbotix_gui" pkg="arbotix_python" type="arbotix_gui" output="screen"/>


  <!--  ************* Moveit config stuff *************  -->

  <!-- Load the URDF, SRDF and other .yaml configuration files on the param server -->
  <include file="$(find turtlebot_arm_moveit_config)/launch/planning_context.launch">
    <arg name="load_robot_description" value="false"/>
  </include>

  <!-- Run the main MoveIt executable to provide move groups -->
  <include file="$(find turtlebot_arm_moveit_config)/launch/move_group.launch">
    <arg name="allow_trajectory_execution" value="true"/>  
    <arg name="fake_execution" value="false"/>
    <arg name="info" value="true"/>
  </include>
</launch>
