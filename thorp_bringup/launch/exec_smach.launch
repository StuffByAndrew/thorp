<!--
  Make Thorp execute a specific SMACH application
    TODO 1: still not launching the whole stuff; navigation is missing
    TODO 2: this is not fully generic, as keyboard_ctrl is obj manip specific; idea: make it issue generic commands and show "not apply" when the SM rejects it
 -->

<launch>
  <arg name="smach_app"/>
  <arg name="keyboard_ctrl" default="true"/>
  <arg name="external_camera" default="false"/>

  <!--  ******** External 3D camera (optional) ********  -->

  <include if="$(arg external_camera)" file="$(find thorp_bringup)/launch/includes/xtion.launch.xml">
    <arg name="camera_name" value="external_camera"/>
  </include>


  <!--  *********** Thorp robot standalone ************  -->
  <include file="$(find thorp_bringup)/launch/thorp_robot.launch"/>


  <!--  ************* Moveit config stuff *************  -->

  <!-- Load the URDF, SRDF and other .yaml configuration files on the param server -->
  <include file="$(find thorp_moveit_config)/launch/planning_context.launch">
    <arg name="load_robot_description" value="false"/>
  </include>

  <!-- Run the main MoveIt executable to provide move groups -->
  <include file="$(find thorp_moveit_config)/launch/move_group.launch">
    <arg name="allow_trajectory_execution" value="true"/>
    <arg name="fake_execution" value="false"/>
    <arg name="info" value="true"/>
  </include>

  <!--  Fake global reference to make Moveit octomap happy  -->
  <node pkg="tf" type="static_transform_publisher" name="fake_global_reference" output="screen" respawn="true"
        args="0.0 0.0 0.0 0.0 0.0 0.0 map odom 100"/>


  <!--  ****** Thorp perception and manipulation ******  -->

  <node pkg="thorp_arm_ctrl" type="thorp_arm_ctrl_server" name="thorp_arm_ctrl_server" output="screen" respawn="true">
    <rosparam file="$(find thorp_arm_ctrl)/param/pick_and_place.yaml" command="load"/>
  </node>

  <node pkg="thorp_arm_ctrl" type="scene_interaction_server" name="scene_interaction_server" output="screen" respawn="true">
  </node>

  <node pkg="thorp_obj_rec" type="object_detection_server" name="object_detection_server" output="screen" respawn="true">
    <param name="ork_execute_timeout" value="5.0"/>

    <remap from="rgb_image" to="xtion/rgb/image_raw"/>
  </node>

  <node pkg="object_recognition_ros" type="object_information_server" name="object_information_server" output="screen" respawn="true">
  </node>

  <!--  **************** ORK pipeline *****************  -->

  <include if="$(arg external_camera)" file="$(find thorp_obj_rec)/launch/obj_rec.launch.xml" ns="tabletop">
    <arg name="as_server"    value="true"/>
    <arg name="config_file"  value="$(find thorp_obj_rec)/config/ork/external.tabletop.detection.ros.ork"/>
    <arg name="robot_frame"  value="base_footprint"/>
    <arg name="sensor_frame" value="external_camera_depth_optical_frame"/>
  </include>

  <include unless="$(arg external_camera)" file="$(find thorp_obj_rec)/launch/obj_rec.launch.xml" ns="tabletop">
    <arg name="as_server"    value="true"/>
    <arg name="config_file"  value="$(find thorp_obj_rec)/config/ork/tabletop.detection.ros.ork"/>
    <arg name="robot_frame"  value="base_footprint"/>
    <arg name="sensor_frame" value="xtion_depth_optical_frame"/>
  </include>


  <!--  ****** Executive smach and visualization ******  -->

  <node pkg="thorp_smach" type="$(arg smach_app).py" name="$(arg smach_app)_smach" output="screen" respawn="true">
    <param name="rec_objects_frame" value="map"/>
  </node>

  <node pkg="rqt_smach" type="rqt_smach" name="$(arg smach_app)_smach_viewer" output="screen" respawn="true"/>

  <!--  ******* Keyboard interaction with smach *******  -->
  <!-- We do it required so it will shutdown the whole demo on exit -->
  <node if="$(arg keyboard_ctrl)" pkg="thorp_smach" type="keyboard_ctrl.py" name="$(arg smach_app)_key_ctrl" output="screen" required="true"
        args="$(arg smach_app)">
    <param name="window_geometry" value="360x240"/>
    <param name="window_caption" value="Object manipulation user commands"/>
    <param name="shown_text" value="Available commands: &#10;  s:  start &#10;  x:  stop &#10;  r:  reset &#10;  f:  fold &#10;  e:  exit"/>
    <param name="text_font" value="Comic Sans MS"/>
    <param name="font_size" value="12"/>
  </node>


  <!-- Run Rviz and load the default config to see the state of the move_group node and the scene interaction markers -->
  <node pkg="rviz" type="rviz" name="rviz" output="screen" respawn="true"
        args="-d $(find thorp_bringup)/rviz/view_manip.rviz"/>

</launch>
